---
import BaseHead from '../../components/BaseHead.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';
import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  import.meta.env.PUBLIC_SUPABASE_URL,
  import.meta.env.PUBLIC_SUPABASE_ANON_KEY
);

const {
  data: { session },
} = await supabase.auth.getSession();

if (!session) {
  return Astro.redirect('/admin/login');
}

const { data: categories } = await supabase
  .from('categories')
  .select('*')
  .order('name');
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={`Categories - ${SITE_TITLE}`} description={SITE_DESCRIPTION} />
  </head>
  <body class="bg-gray-50">
    <div class="min-h-screen">
      <nav class="bg-white shadow">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div class="flex justify-between h-16">
            <div class="flex">
              <div class="flex-shrink-0 flex items-center">
                <h1 class="text-xl font-bold">Admin Dashboard</h1>
              </div>
              <div class="hidden sm:ml-6 sm:flex sm:space-x-8">
                <a href="/admin" class="text-gray-500 hover:text-gray-900 inline-flex items-center px-1 pt-1 border-b-2 border-transparent text-sm font-medium">
                  Dashboard
                </a>
                <a href="/admin/posts" class="text-gray-500 hover:text-gray-900 inline-flex items-center px-1 pt-1 border-b-2 border-transparent text-sm font-medium">
                  Posts
                </a>
                <a href="/admin/categories" class="text-gray-900 inline-flex items-center px-1 pt-1 border-b-2 border-indigo-500 text-sm font-medium">
                  Categories
                </a>
                <a href="/admin/menus" class="text-gray-500 hover:text-gray-900 inline-flex items-center px-1 pt-1 border-b-2 border-transparent text-sm font-medium">
                  Menus
                </a>
              </div>
            </div>
            <div class="flex items-center">
              <button id="logout" class="text-gray-500 hover:text-gray-900">
                Logout
              </button>
            </div>
          </div>
        </div>
      </nav>

      <div class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        <div class="px-4 py-6 sm:px-0">
          <div class="flex justify-between items-center mb-6">
            <h2 class="text-2xl font-bold">Categories</h2>
            <button id="add-category" class="bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700">
              Add Category
            </button>
          </div>

          <div class="bg-white shadow overflow-hidden sm:rounded-md">
            <ul class="divide-y divide-gray-200" id="categories-list">
              {categories?.map((category) => (
                <li class="px-6 py-4 flex items-center justify-between">
                  <div>
                    <p class="text-sm font-medium text-gray-900">{category.name}</p>
                    <p class="text-sm text-gray-500">{category.slug}</p>
                  </div>
                  <div class="flex space-x-3">
                    <button class="text-indigo-600 hover:text-indigo-900 edit-category" data-id={category.id}>
                      Edit
                    </button>
                    <button class="text-red-600 hover:text-red-900 delete-category" data-id={category.id}>
                      Delete
                    </button>
                  </div>
                </li>
              ))}
            </ul>
          </div>
        </div>
      </div>
    </div>

    <!-- Modal for adding/editing categories -->
    <div id="category-modal" class="fixed inset-0 bg-gray-500 bg-opacity-75 hidden">
      <div class="flex items-center justify-center min-h-screen">
        <div class="bg-white rounded-lg p-8 max-w-md w-full">
          <h3 class="text-lg font-medium mb-4" id="modal-title">Add Category</h3>
          <form id="category-form">
            <input type="hidden" id="category-id">
            <div class="mb-4">
              <label for="name" class="block text-sm font-medium text-gray-700">Name</label>
              <input type="text" id="name" name="name" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm">
            </div>
            <div class="flex justify-end space-x-3">
              <button type="button" id="close-modal" class="bg-gray-200 text-gray-700 px-4 py-2 rounded-md hover:bg-gray-300">
                Cancel
              </button>
              <button type="submit" class="bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700">
                Save
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <script>
      import { createClient } from '@supabase/supabase-js';

      const supabase = createClient(
        import.meta.env.PUBLIC_SUPABASE_URL,
        import.meta.env.PUBLIC_SUPABASE_ANON_KEY
      );

      // Logout handler
      document.getElementById('logout').addEventListener('click', async () => {
        await supabase.auth.signOut();
        window.location.href = '/admin/login';
      });

      // Modal handlers
      const modal = document.getElementById('category-modal');
      const closeModal = () => modal.classList.add('hidden');
      const openModal = () => modal.classList.remove('hidden');

      document.getElementById('add-category').addEventListener('click', () => {
        document.getElementById('modal-title').textContent = 'Add Category';
        document.getElementById('category-id').value = '';
        document.getElementById('name').value = '';
        openModal();
      });

      document.getElementById('close-modal').addEventListener('click', closeModal);

      // Form submission
      document.getElementById('category-form').addEventListener('submit', async (e) => {
        e.preventDefault();
        const id = document.getElementById('category-id').value;
        const name = document.getElementById('name').value;
        const slug = name.toLowerCase().replace(/\s+/g, '-');

        try {
          if (id) {
            await supabase
              .from('categories')
              .update({ name, slug })
              .eq('id', id);
          } else {
            await supabase
              .from('categories')
              .insert([{ name, slug }]);
          }
          window.location.reload();
        } catch (error) {
          alert('Error saving category');
        }
      });

      // Edit category
      document.querySelectorAll('.edit-category').forEach(button => {
        button.addEventListener('click', async () => {
          const id = button.dataset.id;
          const { data: category } = await supabase
            .from('categories')
            .select()
            .eq('id', id)
            .single();

          document.getElementById('modal-title').textContent = 'Edit Category';
          document.getElementById('category-id').value = category.id;
          document.getElementById('name').value = category.name;
          openModal();
        });
      });

      // Delete category
      document.querySelectorAll('.delete-category').forEach(button => {
        button.addEventListener('click', async () => {
          if (confirm('Are you sure you want to delete this category?')) {
            const id = button.dataset.id;
            await supabase
              .from('categories')
              .delete()
              .eq('id', id);
            window.location.reload();
          }
        });
      });
    </script>
  </body>
</html>